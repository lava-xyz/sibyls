use secp256k1_zkp::{hashes::*, ThirtyTwoByteHash};

// DLC/oracle/announcement/v0
const DLC_V0_ANNOUNCEMENT_MIDSTATE: [u8; 32] = [
    0x0f, 0xfb, 0xaf, 0x80, 0xef, 0x9f, 0x3f, 0xe9, 0x8c, 0xe5, 0xd6, 0xa8, 0x7a, 0xad, 0xb4, 0x59,
    0x8f, 0x85, 0xcb, 0x21, 0x3e, 0x32, 0xe3, 0x28, 0xdf, 0x98, 0xfe, 0xdb, 0x00, 0xc9, 0x7c, 0x83,
];

// DLC/oracle/attestation/v0
const DLC_V0_ATTESTATION_MIDSTATE: [u8; 32] = [
    0xcc, 0xed, 0x66, 0xce, 0x5c, 0x43, 0xb3, 0x63, 0x85, 0x5e, 0x75, 0xe6, 0x63, 0x4b, 0xa5, 0x9c,
    0x8e, 0x8b, 0xf4, 0x11, 0xf7, 0x23, 0x5a, 0x31, 0x51, 0x73, 0x92, 0x6b, 0xdf, 0xe9, 0x39, 0xb8,
];

sha256t_hash_newtype!(
    DLCV0AnnouncementHash,
    DLCV0AnnouncementHashTag,
    DLC_V0_ANNOUNCEMENT_MIDSTATE,
    64,
    doc = "DLC v0 announcement tagged hash",
    true
);

impl ThirtyTwoByteHash for DLCV0AnnouncementHash {
    fn into_32(self) -> [u8; 32] {
        self.into_inner()
    }
}

sha256t_hash_newtype!(
    DLCV0AttestationHash,
    DLCV0AttestationHashTag,
    DLC_V0_ATTESTATION_MIDSTATE,
    64,
    doc = "DLC v0 outcome tagged hash",
    true
);

impl ThirtyTwoByteHash for DLCV0AttestationHash {
    fn into_32(self) -> [u8; 32] {
        self.into_inner()
    }
}
